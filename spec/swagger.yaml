# Documentation: https://swagger.io/docs/specification/2-0/basic-structure/

swagger: '2.0'
schemes:
  - http
host: localhost:8813
basePath: /
info:
  description: |
    # A.L.E Double-Entry Accounting REST API

    ALE divides itself into "books", each of which store *journal entries* and their child *transactions*.
    The cardinal rule of double-entry accounting is that "everything must balance out to zero", and that rule is applied
    to every journal entry written to the book. If the transactions for a journal entry do not balance out to zero, the
    system will return a rejected promise.
  version: '1.0.0'
  title: A.L.E.
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: '/logo.png'
externalDocs:
  description: A.L.E. Github page
  url: 'https://github.com/CjS77/ale'
produces:
  # This is a global default. You can OVERWRITE it in each specific operation.
  - application/json
consumes:
  # List of mime types the API endpoints consume
  # This is a global default. You can OVERWRITE it in each specific operation.
  - application/json
# Holds the relative paths to the individual endpoints. The path is appended to the basePath in order to construct the full URL.
paths:
  '/books/': # path parameter in curly braces
    get:
      summary: List all current books
      description: |
        Produces an array of all the books currently registered on the database.
      operationId: getBooks
      responses:
        200:
          description: The array of books
          schema: # response schema can be specified for each response
            $ref: '#/definitions/Books'
          examples:
            application/json:
              [
                { id: "General Ledger", currency: "USD"},
                { id: "London office ledger", currency: "GBP"},
              ]

    post:
      parameters:
        - in: body
          name: body
          description: New Book definition
          required: true
          schema:
            $ref: '#/definitions/Book'
      operationId: postBooks
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Result'
          examples:
            application/json:
              success: false
              message: Book 'General' already exists
        400:
          description: Bad input
          schema:
            $ref: '#/definitions/Result'
          examples:
            application/json:
              success: false
              message: Book 'Foobar' does not exist

  '/books/{bookId}/entries':
    get:
      summary: List entries in book
      description: |
        Fetches entries for the given book and their transactions
      operationId: getBookEntries

      parameters:
      - name: bookId
        description: The book to extract entries from
        in: path
        type: string
        required: true

      - name: startDate
        in: query
        description: 'The start date for entries'
        required: false
        type: string

      - name: endDate
        in: query
        description: 'The end date for entries'
        required: false
        type: string

      produces:
      - application/json
      responses: # list of responses
        200:
          description: Success
          schema:
            $ref: '#/definitions/Entries'
          examples:
            application/json:
              {
                book: { id: "General Ledger", currency: 'USD' },
                startDate: 1520228313023,
                endDate: 1520428313023,
                entries: [
                  {
                    date: 1520228313023,
                    debits: [
                      { account: "Bank:Local", description: "Payroll", value: 1000.0, currency: "USD", exchangeRate: 1.0 }
                    ],
                    credits: [
                      { account: "Employees:Alice", description: "Jan 2018", value: 500.0, currency: "USD", exchangeRate: 1.0 },
                      { account: "Employees:Bob", description: "Jan 2018", value: 500.0, currency: "USD", exchangeRate: 1.0 }
                    ]
                  }
                ]
              }
        400:
          description: Invalid input, such as unknown book
          schema:
            $ref: '#/definitions/Result'


# An object to hold data types that can be consumed and produced by operations.
# These data types can be primitives, arrays or models.
definitions:

  Books:
    type: array
    items:
      $ref: '#/definitions/Book'

  Book:
    type: object
    required:
      - id
      - baseCurrency
    properties:
      id:
        description: The id, or name of the book
        type: string
        example: General Ledger
      baseCurrency:
        description: |
          The currency the book is referenced in. All other currencies and calculations are quoted in terms of this currency
        type: string
        example: USD

  Entries:
    type: object
    properties:
      book:
        $ref: '#/definitions/Book'
      startDate:
        type: number
      endDate:
        type: number
      entries:
        type: array
        items:
          $ref: '#/definitions/Entry'

  Entry:
    type: object
    properties:
      date:
        description: The timestamp for the entry
        type: number
      debits:
        description: An array of debits for the entry
        type: array
        items:
          $ref: '#/definitions/Transaction'
      credits:
          description: An array of credit for the entry
          type: array
          items:
            $ref: '#/definitions/Transaction'

  Transaction:
    type: object
    required:
      - account
      - description
      - value
    properties:
      account:
        description: The account this transaction is reflected on
        type: string
      description:
        description: A description for the transaction
        type: string
      value:
        description: The value of the transaction
        type: number
      currency:
        description: The currency for this transaction
        type: string
      exchangeRate:
        description: The exchange rate to convert to the basis currency
        type: number

  Result:
    type: object
    properties:
      success:
        description: Indicates whether request was succesful
        type: boolean
      message:
        type: string


